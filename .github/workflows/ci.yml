name: CI

on:
  push:
    branches: [ main ]
  pull_request:
  name: CI

  on:
    push:
      branches: [ main ]
    pull_request:
      branches: [ main ]

  env:
    CARGO_TERM_COLOR: always

  jobs:
    test:
      name: Test Suite
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4

        - name: Install Rust (actions-rs)
          uses: actions-rs/toolchain@v1
          with:
            toolchain: stable
            components: rustfmt,clippy
            override: true

        - name: Ensure rustfmt & clippy (fallback)
          run: |
            rustup component add --toolchain stable rustfmt || true
            rustup component add --toolchain stable clippy || true

        - name: Cache dependencies
          uses: actions/cache@v3
          with:
            path: |
              ~/.cargo/registry
              ~/.cargo/git
              target/
            key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

        - name: Check formatting
          run: cargo fmt -- --check

        - name: Run clippy
          run: cargo clippy -- -D warnings

        - name: Run tests
          run: cargo test --verbose
          env:
            VAULT_PASSWORD: test-password

        - name: Build release
          run: cargo build --release

    test-windows:
      name: Test Suite (Windows)
      runs-on: windows-latest
      steps:
        - uses: actions/checkout@v4

        - name: Install Rust (actions-rs)
          uses: actions-rs/toolchain@v1
          with:
            toolchain: stable
            components: rustfmt,clippy
            override: true

        - name: Ensure rustfmt & clippy (fallback)
          run: |
            rustup component add --toolchain stable rustfmt || true
            rustup component add --toolchain stable clippy || true

        - name: Run tests
          run: cargo test --verbose
          env:
            VAULT_PASSWORD: test-password

        - name: Build release
          run: cargo build --release
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    - name: Install Rust (actions-rs)
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        components: rustfmt,clippy
        override: true
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      # ensure rustfmt and clippy are available on the toolchain
      # dtolnay/rust-toolchain supports passing `components` input
      with:
        components: rustfmt,clippy
      
    - name: Ensure rustfmt & clippy (fallback)
      run: |
        rustup component add --toolchain stable rustfmt || true
        rustup component add --toolchain stable clippy || true
      
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Check formatting
      run: cargo +stable fmt -- --check
      
    - name: Run clippy
      run: cargo +stable clippy -- -D warnings
      
    - name: Run tests
      run: cargo test --verbose
      env:
    - name: Install Rust (actions-rs)
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        components: rustfmt,clippy
        override: true
        VAULT_PASSWORD: test-password
        
    - name: Build release
      run: cargo build --release

  # Additional job for Windows compatibility
  test-windows:
    name: Test Suite (Windows)
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt,clippy

    - name: Ensure rustfmt & clippy (fallback)
      run: |
        rustup component add --toolchain stable rustfmt || true
        rustup component add --toolchain stable clippy || true
      
    - name: Run tests
      run: cargo test --verbose
      env:
        VAULT_PASSWORD: test-password
        
    - name: Build release
      run: cargo build --release